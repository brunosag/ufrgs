// A := 0
operation clear(A) {
  1: if zero A then goto 0 else goto 2
  2: do dec A goto 1
}

// A := A + B; B := 0
operation dump(A, B) {
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do inc A goto 1
}

// A := A + B (usando B_1)
operation add(A, B, B_1) {
  1: do dump(B_1, B) goto 2
  2: if zero B_1 then goto 0 else goto 3
  3: do dec B_1 goto 4
  4: do inc A goto 5
  5: do inc B goto 2
}

// A := B (usando B_1)
operation copy(A, B, B_1) {
  1: do clear(A) goto 2
  2: do add(A, B, B_1) goto 0
}

// A := A - B (usando B_1)
operation sub(A, B, B_1) {
  1: do dump(B_1, B) goto 2
  2: if zero B_1 then goto 0 else goto 3
  3: do dec B_1 goto 4
  4: do dec A goto 5
  5: do inc B goto 2
}

// A := A * B (usando A_1, B_1, AUX1)
operation multiply(A, B, A_1, B_1, AUX1) {
  1: do dump(A_1, A) goto 2
  2: do copy(B_1, B, AUX1) goto 3
  3: if zero B_1 then goto 6 else goto 4
  4: do dec B_1 goto 5
  5: do add(A, A_1, AUX1) goto 3
  6: do clear(A_1) goto 0
}

// A := A^B (usando A_1, B_1, AUX1, AUX2, AUX3)
operation power(A, B, A_1, B_1, AUX1, AUX2, AUX3) {
  1: do dump(A_1, A) goto 2
  2: do inc A goto 3
  3: do copy(B_1, B, AUX1) goto 4
  4: if zero B_1 then goto 7 else goto 5
  5: do dec B_1 goto 6
  6: do multiply(A, A_1, AUX1, AUX2, AUX3) goto 4
  7: do clear(A_1) goto 0
}

// A := ⌊A/2⌋ (usando A_1)
operation div_2(A, A_1) {
  1: do dump(A_1, A) goto 2
  2: if zero A_1 then goto 0 else goto 3
  3: do dec A_1 goto 4
  4: if zero A_1 then goto 0 else goto 5 
  5: do dec A_1 goto 6
  6: do inc A goto 2
}

// A = 2k | k ∈ ℕ⁺ (usando A_1)
test is_positive_even(A, A_1) {
  1: do dump(A_1, A) goto 2
  2: do dec A_1 goto 3
  3: do inc A goto 4
  4: if zero A_1 then goto false else goto 5
  5: do dec A_1 goto 6
  6: do inc A goto 7
  7: if zero A_1 then goto true else goto 2
}

// A := B[0] | B = cod(B[0], B[1]) (usando B_1, AUX1)
operation first(A, B, B_1, AUX1) {
  1: do clear(A) goto 2
  2: do copy(B_1, B, AUX1) goto 3
  3: if is_positive_even(B_1, AUX1) then goto 4 else goto 6
  4: do inc A goto 5
  5: do div_2(B_1, AUX1) goto 3
  6: do clear(B_1) goto 0
}

// A := B[1] | B = cod(B[0], B[1]) (usando AUX1)
operation second(A, B, AUX1) {
  1: do copy(A, B, AUX1) goto 2
  2: if is_positive_even(A, AUX1) then goto 3 else goto 4
  3: do div_2(A, AUX1) goto 2
  4: do dec A goto 5
  5: do div_2(A, AUX1) goto 0
}

// A >= B (usando B_1, AUX1)
test is_greater_equal(A, B, B_1, AUX1) {
  1: do copy(B_1, B, AUX1) goto 2
  2: do sub(B_1, A, AUX1) goto 3
  3: if zero B_1 then goto true else goto 4
  4: do clear(B_1) goto false
}

// A := ⌊A/3⌋ (usando A_1)
operation div_3(A, A_1) {
  1: do dump(A_1, A) goto 2
  2: if zero A_1 then goto 0 else goto 3
  3: do dec A_1 goto 4
  4: if zero A_1 then goto 0 else goto 5 
  5: do dec A_1 goto 6
  6: if zero A_1 then goto 0 else goto 7
  7: do dec A_1 goto 8
  8: do inc A goto 2
}

// A := cod(A0, A1) (usando A_1, AUX1, AUX2, AUX3, AUX4, AUX5)
operation pair(A, A0, A1, A_1, AUX1, AUX2, AUX3, AUX4, AUX5) {
  1: do clear(A) goto 2
  2: do add A 2 goto 3
  3: do power(A, A0, AUX1, AUX2, AUX3, AUX4, AUX5) goto 4
  4: do add A_1 2 goto 5
  5: do multiply(A_1, A1, AUX1, AUX2, AUX3) goto 6
  6: do inc A_1 goto 7
  7: do multiply(A, A_1, AUX1, AUX2, AUX3) goto 8
  8: do clear(A_1) goto 0
}

